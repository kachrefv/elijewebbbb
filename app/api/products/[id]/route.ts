import { NextResponse } from 'next/server';import { getServerSession } from 'next-auth';import { authOptions } from '@/lib/auth';import prisma from '@/lib/prisma';export async function GET(request: Request, { params }: { params: { id: string } }) {  try {    const session = await getServerSession(authOptions);    if (!session?.user?.id) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { id } = params;    const product = await prisma.product.findUnique({      where: { id, userId: session.user.id },    });    if (!product) {      return new NextResponse('Product not found', { status: 404 });    }    return NextResponse.json(product);  } catch (error) {    console.error('Error fetching product:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}export async function PUT(request: Request, { params }: { params: { id: string } }) {  try {    const session = await getServerSession(authOptions);    if (!session?.user?.id) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { id } = params;    const body = await request.json();    const { name, description, price, stock, imageUrl } = body;    const updatedProduct = await prisma.product.update({      where: { id, userId: session.user.id },      data: {        name,        description,        price: price !== undefined ? parseFloat(price) : undefined,        stock: stock !== undefined ? parseInt(stock) : undefined,        imageUrl,      },    });    return NextResponse.json(updatedProduct);  } catch (error) {    console.error('Error updating product:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}export async function DELETE(request: Request, { params }: { params: { id: string } }) {  try {    const session = await getServerSession(authOptions);    if (!session?.user?.id) {      return new NextResponse('Unauthorized', { status: 401 });    }    const { id } = params;    await prisma.product.delete({      where: { id, userId: session.user.id },    });    return new NextResponse(null, { status: 204 });  } catch (error) {    console.error('Error deleting product:', error);    return new NextResponse('Internal Server Error', { status: 500 });  }}