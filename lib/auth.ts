import { PrismaAdapter } from '@next-auth/prisma-adapter';import { NextAuthOptions } from 'next-auth';import CredentialsProvider from 'next-auth/providers/credentials';import bcrypt from 'bcrypt';import prisma from './prisma';export const authOptions: NextAuthOptions = {  adapter: PrismaAdapter(prisma),  providers: [    CredentialsProvider({      name: 'Credentials',      credentials: {        email: { label: 'Email', type: 'text' },        password: { label: 'Password', type: 'password' },      },      async authorize(credentials) {        if (!credentials?.email || !credentials?.password) {          return null;        }        const user = await prisma.user.findUnique({          where: {            email: credentials.email,          },        });        if (!user || !user.hashedPassword) {          return null;        }        const isCorrectPassword = await bcrypt.compare(          credentials.password,          user.hashedPassword        );        if (!isCorrectPassword) {          return null;        }        return user;      },    }),  ],  session: {    strategy: 'jwt',  },  pages: {    signIn: '/login',    error: '/login',  },  callbacks: {    async jwt({ token, user }) {      if (user) {        token.id = user.id;        token.name = user.name;        token.email = user.email;        token.image = user.image;      }      return token;    },    async session({ session, token }) {      if (token) {        session.user.id = token.id as string;        session.user.name = token.name;        session.user.email = token.email;        session.user.image = token.image;      }      return session;    },  },  secret: process.env.NEXTAUTH_SECRET,};